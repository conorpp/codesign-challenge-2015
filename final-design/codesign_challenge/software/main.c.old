#include "system.h"
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <io.h>
#include "sys/alt_timestamp.h"

#define SCREENSIZE 512
#define SCREENBYTES (SCREENSIZE * SCREENSIZE / 8)
#define NUMCIRCLES 50

#define DEBUG 0
#define TEST 0
#define LIMIT 202
#define ITERATIONS 50
#define ITERATIONS_START 2

unsigned dx[NUMCIRCLES];
unsigned dy[NUMCIRCLES];
unsigned dr[NUMCIRCLES];

//unsigned char *screen = (unsigned char *) PIXELTEST_BASE;

uint32_t *screen_mm = (uint32_t *) PIXELMEMORY_BASE;
uint32_t *screen = (uint32_t *) PIXELMEMORY_BASE;

void clearscreen() {
    unsigned i;
    for (i=0; i<SCREENBYTES; i++)
    {
        screen[i] = 0;
    }
}
void clearscreen_hw() {
    unsigned i;
    for (i=0; i<SCREENBYTES; i++)
    {
        screen_mm[i] = 0;
    }
}
unsigned checkscreen() {
    unsigned i, v = 0;
    for (i=0; i<SCREENBYTES; i++)
        v += screen[i];
    return v;
}
unsigned checkscreen_hw() {
    unsigned i, v = 0;
    for (i=0; i<SCREENBYTES; i++){

        v += screen_mm[i];
    }
    return v;
}

int getpixel_bs(int x,int y)
{
    x = x - dx[0];
    y = y - dy[0];
    return (x*x + y*y == dr[0] * dr[0] ? 1 : 0);
}

unsigned checkscreen_bs() {
    unsigned i, v = 0;
    for (i=0; i<SCREENBYTES*8; i++)
    {
        unsigned y = (i >> 9) & 0x1ff;
        unsigned x = (i) & 0x1ff;
        int p = getpixel_bs(x,y);
        p = p << (i&0x7);
        v += p;
    }
    return v;
}

void driverdata(int k) {
    int j;
    for (j=0; j<k ; j++)
    {
        rand();
    }
    unsigned i;
    for (i=0; i<NUMCIRCLES; i++) {
        dr[i] = rand() % (SCREENSIZE/2);
        dx[i] = dr[i] + rand() % (SCREENSIZE - 2*dr[i]);
        dy[i] = dr[i] + rand() % (SCREENSIZE - 2*dr[i]);
    }

}

void setpixel(unsigned x, unsigned y) {
    unsigned bytenum = (y * SCREENSIZE + x)/8;
    unsigned bitnum  = x % 8;

    if (x > (SCREENSIZE-1))
        return;
    if (y > (SCREENSIZE-1))
        return;

#if DEBUG
    printf("setting bit at (%u, %u) (%u)\n",x,y,(1 << bitnum));
#endif

    screen[bytenum] |= (1 << bitnum);
}
void setpixel_hw(unsigned x, unsigned y) {
    unsigned bytenum = (y * SCREENSIZE + x)/8;

    if (x > (SCREENSIZE-1))
        return;
    if (y > (SCREENSIZE-1))
        return;

    screen_mm[bytenum] = (1);
}


unsigned getpixel(unsigned x, unsigned y) {
    unsigned bytenum = (y * SCREENSIZE + x)/8;
    unsigned bitnum  = x % 8;

    if (x > (SCREENSIZE-1))
        return 0;
    if (y > (SCREENSIZE-1))
        return 0;

    if (screen[bytenum] & (1 << bitnum))
        return 1;
    else
        return 0;
}


unsigned getpixel_hw(unsigned x, unsigned y) {
    unsigned bytenum = (y * SCREENSIZE + x)/8;
    unsigned bitnum  = x % 8;

    if (x > (SCREENSIZE-1))
        return 0;
    if (y > (SCREENSIZE-1))
        return 0;

    if (screen_mm[bytenum] & (1 << bitnum))
        return 1;
    else
        return 0;
}

void printscreen_bs() {
    unsigned x, y;
    for (x=0; x<SCREENSIZE/2; x++) {
        for (y=0; y<SCREENSIZE; y++) {
            if (getpixel_bs(x,y))
                printf("*");
            else
                printf(".");
        }
        printf("\n");
    }
}

void printscreen() {
    unsigned x, y;
    for (x=0; x<SCREENSIZE/2; x++) {
        for (y=0; y<SCREENSIZE; y++) {
            if (getpixel(x,y))
                printf("*");
            else
                printf(".");
        }
        printf("\n");
    }
}


#define ANSI_COLOR_RED     "\x1b[31m"
#define ANSI_COLOR_GREEN   "\x1b[32m"
#define ANSI_COLOR_YELLOW  "\x1b[33m"
#define ANSI_COLOR_BLUE    "\x1b[34m"
#define ANSI_COLOR_MAGENTA "\x1b[35m"
#define ANSI_COLOR_CYAN    "\x1b[36m"
#define ANSI_COLOR_RESET   "\x1b[0m"

void printscreen_hw() {
    unsigned x, y;
    for (x=0; x<SCREENSIZE; x++) {
        for (y=0; y<SCREENSIZE; y++) {
            int p1 = getpixel(x,y);
            int p2 = getpixel_hw(x,y);
            if (p1 && p2 )
                printf(ANSI_COLOR_GREEN"*"ANSI_COLOR_RESET);
            else if (~p1 && p2)
            {
                printf(ANSI_COLOR_RED"*"ANSI_COLOR_RESET);
                //printf("\nfail (%d,%d)\n", x,y);
            }
            else if (p1 && ~p2)
            {
                printf(ANSI_COLOR_YELLOW "*"ANSI_COLOR_RESET);
                //printf("\nfail (%d,%d)\n", x,y);
            }
            else
            {
                printf(".");
            }

        }
        printf("\n");
    }
}

void printscreen_sm(int record) {
}

void plotcircle(unsigned cx,
        unsigned cy,
        unsigned r) {
    int x, y;
    int xp;

    x   = r;
    y   = 0;
    xp  = 1 - (int) r;
    int i = 0;
    while (x >= y) {
        // 1
        setpixel(cx + x, cy + y);

        // 8
        setpixel(cx + x, cy - y);
        // 
        setpixel(cx - x, cy + y);
        // 5
        setpixel(cx - x, cy - y);
        // 3
        setpixel(cx + y, cy + x);
        // 7
        setpixel(cx + y, cy - x);
        // 3
        setpixel(cx - y, cy + x);
        // 6
        setpixel(cx - y, cy - x);
        y   = y + 1;
        if (xp < 0)
            xp += (2*y + 1);
        else {
            x = x - 1;
            xp += 2*(y-x) + 1;
        }
    }
    //printf("ran through %d iterations\n",i);
}


void showgreen(unsigned v) {
    unsigned n = IORD(PIO_2_BASE,0);	
    unsigned n2 = (0x3FFFF & n) | ((v & 0x1FF) << 18);
    IOWR(PIO_2_BASE, 0, n2);	
}

void showred(unsigned v) {
    unsigned n = IORD(PIO_2_BASE, 0);	
    unsigned n2 = (0x7FC0000 & n) | (v & 0x3FFFF);
    IOWR(PIO_2_BASE, 0, n2);	
}

void clearhex() {
    IOWR(PIO_0_BASE, 0, 0xFFFFFFFF);	
    IOWR(PIO_1_BASE, 0, 0xFFFFFFFF);	
}

// REFERENCE CASE
void plotallcircles_ref() {
    unsigned i;
    for (i=0; i<NUMCIRCLES; i++)
        plotcircle(dx[i],dy[i],dr[i]);
}

// ACCELERATED CASE
#define plotallcircles_hw() \
    screen_mm[0] = (1<<26) | (unsigned)dx; \
    asm("nop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\n"); \
    asm("nop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\n"); \
    asm("nop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\n"); \
    asm("nop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\n"); \
    asm("nop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\n"); \
    asm("nop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\n"); \
    asm("nop\n"); \
    asm("nop\n"); \
    asm("nop\n");



int main() {
    
#if TEST

        clearscreen_hw();
        clearscreen();
    int i;
        dr[0] = 40;
        dy[0] = 50;
        dx[0] = 50;

        dr[49] = 40;
        dy[49] = 150;
        dx[49] = 150;

    screen_mm[0] = (1<<26) | (unsigned)dx;

    //plotallcircles_ref();
    //printscreen_hw();
    //printf("sf works? %d\n", getpixel(dx[0] - 1, dy[0]+dr[0]));
    printf("delay enough %d\n",44);
    printf("i live! %d\n", screen_mm[0]);
    printf("hw checksum %d\n" ,checkscreen_hw());

    plotallcircles_ref();
    printf("sw checksum %d\n" ,checkscreen());

    printscreen_hw();

#else
    printf("--- running tests --- \n");
    int i=0;
    printf("\n");
    driverdata(i);
    alt_timestamp_start();
    unsigned n1;

    // reference case
    clearscreen();
    n1 = alt_timestamp();
    plotallcircles_ref();
    n1 = alt_timestamp()-n1;
    float reft = (float) n1;

    // ref should be 1067143 decimal
    int refchksum = checkscreen();
    //printf("refchksum %d\n", refchksum);
    clearscreen_hw();


    n1 = alt_timestamp();
    plotallcircles_hw();


    n1 = alt_timestamp()-n1;
    float hwt = (float) n1;


    int hwchksum = checkscreen_hw();

    //printf("hwchksum %d\n", hwchksum);

    if(refchksum != hwchksum)
    {
        printf("%d FAIL!  ref: %d    hw: %d\n",i,refchksum, hwchksum);
        printf("cx: %d    cy: %d     cr: %d \n",dx[0],dy[0],dr[0]);
        //printscreen_hw();
    }
    else
    {
        printf("k %d Correct!  %d\n",i,hwchksum);
        printf("    %dx speedup\n", (int)(14892988/hwt));
    }
#endif
    printf("done\n");
    return 0;
}
